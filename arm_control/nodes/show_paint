#!/usr/bin/env python3
import rospy
import tf
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import Bool


# set painting_status to False
global painting_status
painting_status = False


rospy.init_node('end_effector_marker_publisher')
def paint_status_callback(data):
    painting_status = data.data



paint_status_sub = rospy.Subscriber('paint_status', Bool, paint_status_callback)

marker_pub = rospy.Publisher('end_effector_markers', MarkerArray, queue_size=10)
listener = tf.TransformListener()
count = 0
rate = rospy.Rate(30)


while not rospy.is_shutdown():
    try:
        (trans, rot) = listener.lookupTransform('manipulator/base_link', 'manipulator/end_effector', rospy.Time(0))
        
        # Here '/base_link' is the parent frame and '/end_effector' is the child frame.
        # The transform returned by lookupTransform() is from '/end_effector' to '/base_link'.
        # trans is the translation vector and rot is the rotation quaternion.
        # You can use these values to perform various tasks, such as controlling the robot or publishing visualizations.

        # Create a marker with a sphere shape at the position of the end effector
    
        if trans[1] > 1.666:
            marker = Marker()
            marker.header.frame_id = 'world'
            marker.header.stamp = rospy.Time.now()
            marker.ns = 'end_effector'
            marker.id  = count
            marker.type = Marker.CYLINDER
            marker.action = Marker.ADD
            marker.pose.position.x = trans[0]
            marker.pose.position.y = trans[1]
            marker.pose.position.z = trans[2]
            marker.pose.orientation.x = rot[0]
            marker.pose.orientation.y = rot[1]
            marker.pose.orientation.z = rot[2]
            marker.pose.orientation.w = rot[3]
            marker.scale.x = 0.4  # Set cylinder diameter to 0.1 meters
            marker.scale.y = 0.01  # Set cylinder diameter to 0.1 meters
            marker.scale.z = 0.03  # Set cylinder height to 0.4 meters
            marker.color.a = 1.0
            marker.color.r = 1.0

            # marker.lifetime = rospy.Duration.from_sec(5.0)  # Set marker lifetime to 5 seconds

            # Publish the marker array
            marker_array = MarkerArray()
            marker_array.markers.append(marker)
            marker_pub.publish(marker_array)
            count += 1
    except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
        continue
    
    rate.sleep()





