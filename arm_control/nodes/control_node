#!/usr/bin/env python3

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import tf2_ros
import tf
from math import pi
from std_msgs.msg import String
from std_srvs.srv import Empty, EmptyResponse
from std_msgs.msg   import Float32,Float64
from visualization_msgs.msg import Marker
from geometry_msgs.msg import TwistStamped, Pose, Point, Vector3, Quaternion
from std_msgs.msg import Header, ColorRGBA, String, Bool
import shape_msgs.msg


class Control:

    def __init__(self):
        """
        Initialize and setup the Motion Planning Scence
        """
        moveit_commander.roscpp_initialize(sys.argv)
        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()
        self.request = moveit_msgs.msg.MotionPlanRequest()
        self.br = tf2_ros.TransformBroadcaster()
        self.static_br = tf2_ros.StaticTransformBroadcaster

        # Marker for Paint
        self.marker = Marker()
        self.maker_pub = rospy.Publisher("paint_marker", Marker, queue_size=10)
        self.paint_status_pub = rospy.Publisher("paint_status", Bool, queue_size=10)

        # Generate ROS services
        self.service_home = rospy.Service("home", Empty, self.home)
        self.service_paint_ready = rospy.Service("paint_ready",Empty,self.paint_ready)
        self.service_pose_move = rospy.Service("pose_move",Empty,self.pose_move)
        self.service_pose_add = rospy.Service("pose_add",Empty,self.pose_add)
        self.service_ee_pose_add = rospy.Service("ee_pose_add",Empty,self.ee_pose_add)
        self.service_get_current_joint_values = rospy.Service("get_current_joint_values",Empty,self.get_current_joint_values)
        self.service_get_current_pose_values = rospy.Service("get_current_pose_values",Empty,self.get_current_pose_values)
        self.service_joint_add = rospy.Service("joint_add",Empty,self.joint_add)
        self.service_joint_move = rospy.Service("joint_move",Empty,self.joint_move)
        self.service_paint = rospy.Service("paint",Empty,self.paint)
        self.service_move_cartesian_path = rospy.Service("move_cartesian_path",Empty,self.move_cartesian_path)


        group_name = 'manipulator'
        self.group = moveit_commander.MoveGroupCommander(group_name)
        self.scene = moveit_commander.PlanningSceneInterface()
        self.request.group_name = group_name
        display_trajectory_publisher = rospy.Publisher("move_group/display_planned_path", moveit_msgs.msg.DisplayTrajectory, queue_size=20)
        self.display_trajectory_publisher = display_trajectory_publisher

        rospy.init_node('arm_control', anonymous=True)
        self.rate = rospy.Rate(60)

        planning_frame = self.group.get_planning_frame()
        print("============ Reference frame: %s" % planning_frame)
        global eef_link
        eef_link = self.group.get_end_effector_link()
        print("============ End effector: %s" % eef_link)
        print("============ Robot Groups:", self.robot.get_group_names())
        print("============ Printing robot state")
        print(self.robot.get_current_state())
        print("")
        print("========================================= \n")
        print("Hello! This is an arm control node of the Hiwin robot. \n")

        paint_ready = rospy.ServiceProxy("paint_ready",Empty)
        get_current_joint_values = rospy.ServiceProxy("get_current_joint_values",Empty)
        get_current_pose_values = rospy.ServiceProxy("get_current_pose_values",Empty)
        go_home = rospy.ServiceProxy("home",Empty)



        ###################
        ## initial setup ##
        ###################
        
        self.paint_status = False
        # sleep
        rospy.sleep(1)
        # move to default position
        go_home()
        # print current joint value
        get_current_joint_values()
        get_current_pose_values()

        # setup moveit enviroment
        self.setup_env()

  


    def get_current_joint_values(self,val):
        j = self.group.get_current_joint_values()
        joints = {"J1":self.rad(j[0]),"J2":self.rad(j[1]),"J3":self.rad(j[2]),"J4":self.rad(j[3]),"J5":self.rad(j[4]),"J6":self.rad(j[5])}
        print("====== Current Joint Angles (deg) =====")
        print(joints)

        return []
    
    def get_current_pose_values(self,val):
        p = self.group.get_current_pose(eef_link)
        euler = self.Quaternion_to_Euler(p.pose.orientation)
        # round to 3 decimal places
        position = {"x":round(p.pose.position.x,3),"y":round(p.pose.position.y,3),"z":round(p.pose.position.z,3)}
        quat = {"x":round(p.pose.orientation.x,3),"y":round(p.pose.orientation.y,3),"z":round(p.pose.orientation.z,3),"w":round(p.pose.orientation.w,3)}
        print("\n====== Current Pose =====")
        print("Position:\n ", position)
        # print("Orientation (Quaternion):\n",quat)
        print("Orientation (Euler (deg)):\n",euler)

        return []
    

    def update(self):
        current_state = self.robot.get_current_state()
        self.request.start_state.joint_state = current_state.joint_state
    

    def Quaternion_to_Euler(self,quaternion):
        """
        Convert Quaternion to Euler
        """
        q = quaternion
        euler_rad = tf.transformations.euler_from_quaternion([q.x,q.y,q.z,q.w])
        euler_deg = [self.rad(euler_rad[0]),self.rad(euler_rad[1]),self.rad(euler_rad[2])]
        # add dictionary index rx, ry, rz
        euler_deg = {"Rx":round(euler_deg[0],3),"Ry":round(euler_deg[1],3),"Rz":round(euler_deg[2],3)}

        return euler_deg

    def deg(self,val):
        """
        convert degree to radian
        """
        degree = float(val) * (pi/180)
        return degree

    def rad(self,val):
        """
        convert radian to degree
        """
        rad = val / (pi/180)
        return rad
    

    def paint_ready(self,val):

        # move to paint ready position
        self.set_cartesian_path([0,1.3,0.7])
        # set the orientation of the end effector
        self.pose_control([0,0,0])
    

        return []
    
    def paint(self,val):
        paint_ready = rospy.ServiceProxy("paint_ready",Empty)
        paint_ready()

        # paint parameters
        top = 1.5
        bottom = 0.3
        right = 1
        left = -1
        down_increment = 0.1
        up_increment = 0.05
        side_increment = 0.4
        painting_num = (top - bottom) / (down_increment - up_increment)
        side_num = (right - left) / side_increment

        
        self.set_cartesian_path([right,1.669,top])
        for i in range(int(side_num)+1):
            x = right - i * side_increment
            self.set_cartesian_path([x, 1.669, top])
            self.up_down_motion(painting_num,down_increment,up_increment)
            paint_ready()


        return []


    def up_down_motion(self,painting_num,down_increment,up_increment):
        self.paint_status = True
        self.paint_status_pub.publish(self.paint_status)
        for i in range(int(painting_num)):
            self.cartesian_path([0,0,-down_increment])
            self.cartesian_path([0,0,up_increment])
        self.paint_status = False
        self.paint_status_pub.publish(self.paint_status)
        


    
    def home(self,val):
        self.joint_goal = self.group.get_current_joint_values()
        self.joint_goal[0] = 0
        self.joint_goal[1] = self.deg(70)
        self.joint_goal[2] = self.deg(-75)
        self.joint_goal[3] = 0
        self.joint_goal[4] = 0
        self.joint_goal[5] = 0
        self.group.go(self.joint_goal, wait=True)
        self.group.stop()
        self.group.clear_pose_targets()


        return []

    def cartesian_path(self, pose_goal, scale=1.0):

        waypoints = []

        wpose = self.group.get_current_pose().pose
        wpose.position.x += pose_goal[0] 
        wpose.position.y += pose_goal[1]
        wpose.position.z += pose_goal[2]
        waypoints.append(copy.deepcopy(wpose))

        (plan, fraction) = self.group.compute_cartesian_path(waypoints, 0.01, 0.0, True)  # waypoints to follow  # eef_step # jump_threshold

        self.group.execute(plan, wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
 


    def set_cartesian_path(self, pose_goal, scale=1.0):

        waypoints = []

        wpose = self.group.get_current_pose().pose
        wpose.position.x = pose_goal[0] 
        wpose.position.y = pose_goal[1]
        wpose.position.z = pose_goal[2]
        waypoints.append(copy.deepcopy(wpose))

        (plan, fraction) = self.group.compute_cartesian_path(waypoints, 0.01, 0.0, True)  # waypoints to follow  # eef_step # jump_threshold

        self.group.execute(plan, wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
        self.update()


    def move_cartesian_path(self,val):
        # user input
        x = float(input("Enter x: "))
        y = float(input("Enter y: "))
        z = float(input("Enter z: "))
        # call cartesian path function
        self.cartesian_path([x,y,z])
        
        get_current_pose_values = rospy.ServiceProxy("get_current_pose_values",Empty)
        get_current_pose_values()

        return []




    def joint_control(self,j_mat):
        print("..Executing movement")
        self.joint_goal = self.group.get_current_joint_values()
        self.joint_goal[0] = self.deg(j_mat[0])
        self.joint_goal[1] = self.deg(j_mat[1])
        self.joint_goal[2] = self.deg(j_mat[2])
        self.joint_goal[3] = self.deg(j_mat[3])
        self.joint_goal[4] = self.deg(j_mat[4])
        self.joint_goal[5] = self.deg(j_mat[5])
        self.group.go(self.joint_goal, wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
        print("...Completed!")
       

    def relative_pose_control(self,p_mat):
        print("..Executing movement")
        self.pose_goal = self.group.get_current_pose(eef_link)
        self.pose_goal.pose.position.x += p_mat[0]
        self.pose_goal.pose.position.y += p_mat[1]
        self.pose_goal.pose.position.z += p_mat[2]
        self.group.set_pose_target(self.pose_goal)
        self.plan = self.group.go(wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
        print("...Completed!")


    def ee_pose_control(self,p_mat):
        print("..Executing movement")
        self.pose_goal = self.group.get_current_pose(eef_link)  
        self.pose_goal.pose.position.x += p_mat[0]
        self.pose_goal.pose.position.y += p_mat[1]
        self.pose_goal.pose.position.z += p_mat[2]
        # fix orientation
        self.pose_goal.pose.orientation.x += 0
        self.pose_goal.pose.orientation.y += 0
        self.pose_goal.pose.orientation.z += 0
        self.pose_goal.pose.orientation.w += 0

        self.group.set_pose_target(self.pose_goal)
        self.plan = self.group.go(wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
        print("...Completed!")
   


    def pose_move(self,val):
        print("Execute a pose movement to desired the absolute xyz coordinate \n")
        x_in = input("Target x: ")
        y_in = input("Target y: ")
        z_in = input("Target z: ")
        self.pose_goal = self.group.get_current_pose(eef_link)
        self.pose_goal.pose.position.x = float(x_in)
        self.pose_goal.pose.position.y = float(y_in)
        self.pose_goal.pose.position.z = float(z_in)
        self.group.set_pose_target(self.pose_goal)
        self.plan = self.group.go(wait=True)
        self.group.stop()
        self.group.clear_pose_targets()



        return []

    def pose_add(self,val):
        print("Execute a pose movement by adding desired values from current position ")
        x_in = input("\nAdd x: ")
        y_in = input("\nAdd y: ")
        z_in = input("\nAdd z: ")
        print("..Executing movement")
        self.pose_goal = self.group.get_current_pose(eef_link)
        self.pose_goal.pose.position.x += float(x_in)
        self.pose_goal.pose.position.y += float(y_in)
        self.pose_goal.pose.position.z += float(z_in)
        self.group.set_pose_target(self.pose_goal)
        self.plan = self.group.go(wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
        print("...Completed!")
        
        return []
    
    def pose_control(self,val):
        self.pose_goal = self.group.get_current_pose(eef_link)
        self.pose_goal.pose.position.x += val[0]
        self.pose_goal.pose.position.y += val[1]
        self.pose_goal.pose.position.z += val[2]
        self.pose_goal.pose.orientation.x = 0.0
        self.pose_goal.pose.orientation.y = 0.0
        self.pose_goal.pose.orientation.z = 0.0
        self.pose_goal.pose.orientation.w = 1.0
        self.group.set_pose_target(self.pose_goal)
        self.plan = self.group.go(wait=True)
        self.group.stop()
        self.group.clear_pose_targets()

    

    def ee_pose_add(self,val):
        print("Execute a pose movement by adding desired values from current position while fixed orientation ")
        x_in = input("\nAdd x: ")
        y_in = input("\nAdd y: ")
        z_in = input("\nAdd z: ")
        print("..Executing movement")
        self.pose_goal = self.group.get_current_pose(eef_link)
        self.pose_goal.pose.position.x += float(x_in)
        self.pose_goal.pose.position.y += float(y_in)
        self.pose_goal.pose.position.z += float(z_in)
        # fixed orientation
        self.pose_goal.pose.orientation.x = 0.0
        self.pose_goal.pose.orientation.y = 0.0
        self.pose_goal.pose.orientation.z = 0.0
        self.pose_goal.pose.orientation.w = 1.0
        self.group.set_pose_target(self.pose_goal)
        self.plan = self.group.go(wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
        print("...Completed!")
        
        return []
    


    def joint_move(self,val):
        print("Execute a joint movement to desired angles (deg)")
        j1_in = input("\nTarget Joint 1: ")
        j2_in = input("\nTarget Joint 2: ")
        j3_in = input("\nTarget Joint 3: ")
        j4_in = input("\nTarget Joint 4: ")
        j5_in = input("\nTarget  Joint 5: ")
        j6_in = input("\nTarget  Joint 6: ")
        print("..Executing movement")
        self.joint_goal = self.group.get_current_joint_values()
        self.joint_goal[0] = self.deg(j1_in)
        self.joint_goal[1] = self.deg(j2_in)
        self.joint_goal[2] = self.deg(j3_in)
        self.joint_goal[3] = self.deg(j4_in)
        self.joint_goal[4] = self.deg(j5_in)
        self.joint_goal[5] = self.deg(j6_in)
        self.group.go(self.joint_goal, wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
        print("...Completed!")
        self.get_current_joint_values(val)
     
        return []


    def joint_add(self,val):
        print("Execute a joint movement by adding desired angles (deg) from current joint angles")
        j1_in = input("\nAdd on Joint 1: ")
        j2_in = input("\nAdd on Joint 2: ")
        j3_in = input("\nAdd on Joint 3: ")
        j4_in = input("\nAdd on Joint 4: ")
        j5_in = input("\nAdd on Joint 5: ")
        j6_in = input("\nAdd on Joint 6: ")
        print("..Executing movement")
        self.joint_goal = self.group.get_current_joint_values()
        self.joint_goal[0] += self.deg((j1_in))
        self.joint_goal[1] += self.deg((j2_in))
        self.joint_goal[2] += self.deg((j3_in))
        self.joint_goal[3] += self.deg((j4_in))
        self.joint_goal[4] += self.deg((j5_in))
        self.joint_goal[5] += self.deg((j6_in))
        self.group.go(self.joint_goal, wait=True)
        self.group.stop()
        self.group.clear_pose_targets()
        print("...Completed!")
        self.get_current_joint_values(val)
     
        return []
    
    def setup_env(self):

        ## Publish World frame connected to base_link
        # tf = geometry_msgs.msg.TransformStamped()
        # tf.header.stamp = rospy.Time.now()
        # tf.header.frame_id = "world"
        # tf.child_frame_id = "base_link"
        # tf.transform.translation.x = 0
        # tf.transform.translation.y = 0
        # tf.transform.translation.z = 0
        # tf.transform.rotation.x = 0
        # tf.transform.rotation.y = 0
        # tf.transform.rotation.z = 0
        # tf.transform.rotation.w = 1
        # self.static_br.sendTransform(tf)

        ## Chamber size
        # 3.6 m x 3.6 m x 2.4 m


        ## Add objects into Moveit enviroment
        # Floor
        self.floor = geometry_msgs.msg.PoseStamped()
        self.floor.header.frame_id = 'world'
        self.floor.pose.position.x = 0.
        self.floor.pose.position.y = 0.
        self.floor.pose.position.z = -0.005
        self.scene.add_box("floor", self.floor, size=(5, 5, 0.01))

        # Ceiling
        self.ceiling = geometry_msgs.msg.PoseStamped()
        self.ceiling.header.frame_id = 'world'
        self.ceiling.pose.position.x = 0.
        self.ceiling.pose.position.y = 0.
        self.ceiling.pose.position.z = 2.1
        # self.scene.add_box("ceiling", self.ceiling, size=(5, 5, 0.01))


        # Canvas
        canvas_size = (2.4, 0.02, 1.6)
        self.canvas = geometry_msgs.msg.PoseStamped()
        self.canvas.header.frame_id = 'world'
        self.canvas.pose.position.x = 0
        self.canvas.pose.position.y = 1.7 - canvas_size[1]/2
        self.canvas.pose.position.z = canvas_size[2]/2
        # self.scene.add_box("canvas", self.canvas, canvas_size)

        collision_canvas = moveit_msgs.msg.CollisionObject()
        collision_canvas.id = 'canvas'
        collision_canvas.header.frame_id = 'world'
        box = shape_msgs.msg.SolidPrimitive()
        box.type = box.BOX
        box.dimensions = [canvas_size[0], canvas_size[1], canvas_size[2]]
        collision_canvas.primitives.append(box)
        pose = geometry_msgs.msg.PoseStamped()
        pose.header.frame_id = 'world'
        pose.pose.position.x = 0
        pose.pose.position.y = 1.7 - canvas_size[1]/2
        pose.pose.position.z = canvas_size[2]/2
        collision_canvas.primitive_poses.append(pose.pose)
        self.scene.add_object(collision_canvas)



        # Canvas2 45 deg rotation
        self.canvas2 = geometry_msgs.msg.PoseStamped()
        self.canvas2.header.frame_id = 'world'
        self.canvas2.pose.position.x = 0.494
        self.canvas2.pose.position.y = 0.494
        self.canvas2.pose.position.z = 0.3
        self.canvas2.pose.orientation.x = 0
        self.canvas2.pose.orientation.y = 0
        self.canvas2.pose.orientation.z = 0.383
        self.canvas2.pose.orientation.w = 0.924
        # self.scene.add_box("canvas2", self.canvas2, canvas_size)

        # Canvas3 -45 deg rotation
        self.canvas3 = geometry_msgs.msg.PoseStamped()
        self.canvas3.header.frame_id = 'world'
        self.canvas3.pose.position.x = 0.494
        self.canvas3.pose.position.y = -0.494
        self.canvas3.pose.position.z = 0.3
        self.canvas3.pose.orientation.x = 0
        self.canvas3.pose.orientation.y = 0
        self.canvas3.pose.orientation.z = -0.383
        self.canvas3.pose.orientation.w = 0.924
        # self.scene.add_box("canvas3", self.canvas3, canvas_size)

        # Canvas mounting
        self.canvas_mounting = geometry_msgs.msg.PoseStamped()
        self.canvas_mounting.header.frame_id = 'world'
        self.canvas_mounting.pose.position.x = 0.8
        self.canvas_mounting.pose.position.y = 0.3
        self.canvas_mounting.pose.position.z = 0.3


        # Power Supply 
        # self.box_pose = geometry_msgs.msg.PoseStamped()
        # self.box_pose.header.frame_id = 'world'
        # self.box_pose.pose.position.x = 0
        # self.box_pose.pose.position.y = 0.15
        # self.box_pose.pose.position.z = 0.15/4
        # self.scene.add_box("obstacle", self.box_pose, size=(grab_angle/2, 0.15/2, 0.15/2))





       

if __name__ == "__main__":
    Control()
    rospy.spin()